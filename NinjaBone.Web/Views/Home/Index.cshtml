@model object

<script id="ninjaTemplate" type="text/x-jquery-tmpl">
    <ul id="ninjaList">
        {{each(i, ninja) Ninjas}}
            <li><a href="/Ninja/View/1">${ninja.Name}-${ninja.Phone}</a></li>
        {{/each}}	   
    </ul>    
</script>

<div data-role="page" id="home"> 
    <div data-role="header">Tretton37 Ninjas</div>
    <div data-role="content" id="content">
        <h1 id="loading">Loading</h1>
    </div>
    <div data-role="footer">Foot</div> 
</div>

<script type="text/javascript">
    jQuery(document).ready(function($) {
        // Since jQuery.retrieveJSON delegates to jQuery's Ajax
        // to make requests, we can just set up normal jQuery
        // Ajax listeners.
        $("#loading").ajaxStart(function() {
            console.log("Show");
            $(this).show();
        });
        $("#loading").ajaxStop(function() {
            console.log("Hide");
            $(this).hide();
        });


        var updateArticles = function (callback) {
            // change call to /api/ninjas/cached to use cached version
            $.retrieveJSON("/api/ninjas", function (json, status) {
                $("#ninjaList").remove();
                $("#ninjaTemplate").tmpl(json).appendTo("#content");

                $("#ninjaList").listview();
                $("#loading").hide();

                // If this *isn't* a cache hit, but rather a
                // successful Ajax request, queue an update task
                // for five minutes from now.
                if (status == "success") {
                    // setTimeout(callback, 300000);
                    setTimeout(callback, 5000);
                }
            });
        };

        // In five minutes, kick off a background request for
        // more data. If the user is online, it will be processed
        // immediately. If the user is not, it will queue the
        // request for when the user comes online
        setTimeout(function periodicUpdater() {
            // Pass in this function as the callback to updateArticles
            updateArticles(periodicUpdater);
        }, 5000);

        // Immediately try to retrieve the data. If the cached
        // data is available, it will be used.
        //
        // If the user is online, it will kick off a request for
        // updated content in the background. If not, it will
        // queue the request for later.
        updateArticles();
    });
</script>